1. 
we are multiplying
1250284240*-1844255039 which is
0x4a85d2d0*0xffffffff9212e6c1

actual answer is -2305843009802285360 via wolframalpha
= -0x2000000023153130 = 0xdfffffffdceaced0

2 bits in in elisp are used for type marking, so longs only store 62 bits
since the actual answer of -2305843009802285360 (=0xdfffffffdceaced0) is 64bits,
its information was lost in truncation. 
It was modded by 2^62 => 0xdfffffffdceaced0&2^62 = 0x1fffffffdceaced0 which is 2305843008625102544, the printed value

Assembly line that cucked it:
rbp had the correct answer, but this command happened
547920	48 8d 04 ad 02 00 00 00	lea 0x2(,%rbp,4) %rax	rax=7fffffff73ab3b42
rax, the return value, becomes a modified version that is rbp (the answer) multiplied by 4 
(equivalent to left shift by 2, thus losing information of the leading two bits)
and added by 0x2 which is the marker for data type long 

later, it is further processed so that the Most Significant 62 bits are looked at, which is why the final effect is modulus by 2^62, and not <<2. 
rax=7fffffff73ab3b42 is later >> by 2 => 0x1fffffffdceaced0 == 2305843008625102544
thus 2305843008625102544 is printed.



2.
62 bits are available for integers in 64-bit word (64-2 for integer markers)
signed integers follow convention of max = 2^(N-1)-1, min = -2^(N-1), where N = num bits
thus min = -2^(62-1) = -2^61 = -2305843009213693952

in terms of source
#define GCTYPEBITS 3
#define GCALIGNMENT 8

    /* Number of bits in a Lisp_Object value, not counting the tag.  */
    VALBITS = BITS_PER_EMACS_INT - GCTYPEBITS,

    /* Number of bits in a Lisp fixnum tag.  */
    INTTYPEBITS = GCTYPEBITS - 1,

    /* Number of bits in a Lisp fixnum value, not counting the tag.  */
    FIXNUM_BITS = VALBITS + 1
  }; //in particular,  INTTYPEBITS = GCTYPEBITS - 1 (==2)
#define EMACS_INT_MAX LONG_MAX  //2^63-1
#define MOST_POSITIVE_FIXNUM (EMACS_INT_MAX >> INTTYPEBITS) //2^61-1
#define MOST_NEGATIVE_FIXNUM (-1 - MOST_POSITIVE_FIXNUM) //-1 -(2^61-1) == -2^61
therefore, 
 DEFVAR_LISP ("most-negative-fixnum", Vmost_negative_fixnum,
	       doc: /* The smallest value that is representable in a Lisp integer.  */);
  Vmost_negative_fixnum = make_number (MOST_NEGATIVE_FIXNUM); //makes -2^61
  XSYMBOL (intern_c_string ("most-negative-fixnum"))->constant = 1;
makes most-negative-fixnum == -2^61


3.
most-positive-fixnum is 2^(N-1), where N is num bits
consider binomial (2^(N-1) - 1)^4
the expansion is:
(2^(N-1))^4 - 4*(2^(N-1))^3 + 6*(2^(N-1))^2 - 4*(2^(N-1)) + 1
note that in integer arithmetic, everything is mod 2^N, if wrapping is enabled 
since only N bits of information can be stored
Notice that 2^(N-1)*(any even integer) = 2^N*(an integer)
and k*2^N mod 2^N == 0

thus, since every other term is an even multiple of 2^N-1, 
the expression reduces to 1 

/** **NOTE**
Note that elisp's multiplication is mod 2^64 in the arith_driver, 
but is later modded by 2^62 (i.e. 2^N), by the effect explained in 1.
So this answer still works.
*/



4.
Since 3. suggests that emacs has wrapping enabled already, 
-fwrapv should cause no problems.



5.
Assembly command
__strcpy_sse2_unaligned
0x00007ffff173949b <+411>:   movdqu %xmm7,-0x10(%rdi)
gives segmentation fault

via backtrace, I found:
      strcpy (tzval + tzeqlen, tzstring);
is the one giving the seg fault

tzval + tzeqlen is a char*, and is allocated 1000bytes of memory from the make-string
however, since 1001 bytes are needed (to store 1000 Xs and a "0"), and we are lucky that
the next memory location for the 0 is in a memory location
that the program is not allowed to access, 
or not allowed to write to (but not super dangerous) 
it causes a segmentation fault










